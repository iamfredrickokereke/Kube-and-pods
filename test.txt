{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube",
                "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                "resourceVersion": "670",
                "creationTimestamp": "2021-06-27T12:34:50Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "minikube",
                    "kubernetes.io/os": "linux",
                    "minikube.k8s.io/commit": "76d74191d82c47883dc7e1319ef7cebd3e00ee11",
                    "minikube.k8s.io/name": "minikube",
                    "minikube.k8s.io/updated_at": "2021_06_27T13_34_57_0700",
                    "minikube.k8s.io/version": "v1.21.0",
                    "node-role.kubernetes.io/control-plane": "",
                    "node-role.kubernetes.io/master": ""
                },
                "annotations": {
                    "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {
                "podCIDR": "10.244.0.0/24",
                "podCIDRs": [
                    "10.244.0.0/24"
                ]
            },
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "2893136Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "2",
                    "ephemeral-storage": "17784752Ki",
                    "hugepages-2Mi": "0",
                    "memory": "2893136Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2021-06-27T12:40:14Z",
                        "lastTransitionTime": "2021-06-27T12:34:40Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2021-06-27T12:40:14Z",
                        "lastTransitionTime": "2021-06-27T12:34:40Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2021-06-27T12:40:14Z",
                        "lastTransitionTime": "2021-06-27T12:34:40Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2021-06-27T12:40:14Z",
                        "lastTransitionTime": "2021-06-27T12:35:09Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "192.168.99.101"
                    },
                    {
                        "type": "Hostname",
                        "address": "minikube"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "b9bc820d70414f2b9ebb87160e6066d3",
                    "systemUUID": "f4c18202-644d-a047-af73-fb25f58b5574",
                    "bootID": "5c73eb5f-3df0-45cd-94fe-3d935d5ea5cd",
                    "kernelVersion": "4.19.182",
                    "osImage": "Buildroot 2020.02.12",
                    "containerRuntimeVersion": "docker://20.10.6",
                    "kubeletVersion": "v1.20.7",
                    "kubeProxyVersion": "v1.20.7",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                            "k8s.gcr.io/etcd:3.4.13-0"
                        ],
                        "sizeBytes": 253392289
                    },
                    {
                        "names": [
                            "kubernetesui/dashboard@sha256:7f80b5ba141bead69c4fee8661464857af300d7d7ed0274cf7beecedc00322e6",
                            "kubernetesui/dashboard:v2.1.0"
                        ],
                        "sizeBytes": 225733746
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-apiserver@sha256:5ab3d676c426bfb272fb7605e6978b90d5676913636a6105688862849961386f",
                            "k8s.gcr.io/kube-apiserver:v1.20.7"
                        ],
                        "sizeBytes": 121762183
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-proxy@sha256:5d2be61150535ed37b7a5fa5a8239f89afee505ab2fae05247447851eed710a8",
                            "k8s.gcr.io/kube-proxy:v1.20.7"
                        ],
                        "sizeBytes": 118396107
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-controller-manager@sha256:eb9b121cbe40cf9016b95cefd34fb9e62c4caf1516188a98b64f091d871a2d46",
                            "k8s.gcr.io/kube-controller-manager:v1.20.7"
                        ],
                        "sizeBytes": 116298119
                    },
                    {
                        "names": [
                            "k8s.gcr.io/kube-scheduler@sha256:6fdb12580353b6cd59de486ca650e3ba9270bc8d52f1d3052cd9bb1d4f28e189",
                            "k8s.gcr.io/kube-scheduler:v1.20.7"
                        ],
                        "sizeBytes": 47268231
                    },
                    {
                        "names": [
                            "k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                            "k8s.gcr.io/coredns:1.7.0"
                        ],
                        "sizeBytes": 45227747
                    },
                    {
                        "names": [
                            "kubernetesui/metrics-scraper@sha256:555981a24f184420f3be0c79d4efb6c948a85cfce84034f85a563f4151a81cbf",
                            "kubernetesui/metrics-scraper:v1.0.4"
                        ],
                        "sizeBytes": 36937728
                    },
                    {
                        "names": [
                            "gcr.io/k8s-minikube/storage-provisioner@sha256:18eb69d1418e854ad5a19e399310e52808a8321e4c441c1dddad8977a0d7a944",
                            "gcr.io/k8s-minikube/storage-provisioner:v5"
                        ],
                        "sizeBytes": 31465472
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause@sha256:927d98197ec1141a368550822d18fa1c60bdae27b78b0c004f705f548c07814f",
                            "k8s.gcr.io/pause:3.2"
                        ],
                        "sizeBytes": 682696
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv.168c708bdd992b4a",
                "namespace": "kube-system",
                "uid": "0cf163ee-5c86-431f-8763-509f43d6a116",
                "resourceVersion": "424",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b-bsdwv",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "apiVersion": "v1",
                "resourceVersion": "407"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-74ff55c5b-bsdwv to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2021-06-27T12:35:11Z",
            "lastTimestamp": "2021-06-27T12:35:11Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv.168c708c2a0e5691",
                "namespace": "kube-system",
                "uid": "0271da02-73f7-4438-abc2-dd8ee13655b6",
                "resourceVersion": "435",
                "creationTimestamp": "2021-06-27T12:35:12Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b-bsdwv",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "apiVersion": "v1",
                "resourceVersion": "412"
            },
            "reason": "FailedMount",
            "message": "MountVolume.SetUp failed for volume \"coredns-token-qgl9z\" : failed to sync secret cache: timed out waiting for the condition",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:12Z",
            "lastTimestamp": "2021-06-27T12:35:12Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv.168c708ce8acb929",
                "namespace": "kube-system",
                "uid": "a7419c9d-cccc-4e5e-b86f-fe33df425b5f",
                "resourceVersion": "446",
                "creationTimestamp": "2021-06-27T12:35:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b-bsdwv",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/coredns:1.7.0\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:16Z",
            "lastTimestamp": "2021-06-27T12:35:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv.168c708cedae85f4",
                "namespace": "kube-system",
                "uid": "22551156-4ae8-411f-b4e3-e46d804e00e7",
                "resourceVersion": "447",
                "creationTimestamp": "2021-06-27T12:35:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b-bsdwv",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:16Z",
            "lastTimestamp": "2021-06-27T12:35:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv.168c708d023e893b",
                "namespace": "kube-system",
                "uid": "56f18c1d-13bd-4680-9f69-34562155eec7",
                "resourceVersion": "448",
                "creationTimestamp": "2021-06-27T12:35:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b-bsdwv",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "apiVersion": "v1",
                "resourceVersion": "412",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:16Z",
            "lastTimestamp": "2021-06-27T12:35:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-74ff55c5b.168c708bda0ce4b3",
                "namespace": "kube-system",
                "uid": "59fce976-1690-4644-b6d5-120083f8d9d5",
                "resourceVersion": "419",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-74ff55c5b",
                "uid": "40531e7e-c13b-4cb2-ab87-0fcf6d4365af",
                "apiVersion": "apps/v1",
                "resourceVersion": "394"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-74ff55c5b-bsdwv",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2021-06-27T12:35:11Z",
            "lastTimestamp": "2021-06-27T12:35:11Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.168c708bc96f158d",
                "namespace": "kube-system",
                "uid": "679a8738-2743-492f-aa4d-685ab29f4021",
                "resourceVersion": "420",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "2eb3cc01-5568-44fd-a91e-c90ce122a640",
                "apiVersion": "apps/v1",
                "resourceVersion": "318"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-74ff55c5b to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2021-06-27T12:35:11Z",
            "lastTimestamp": "2021-06-27T12:35:11Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "k8s.io-minikube-hostpath.168c708d4114357c",
                "namespace": "kube-system",
                "uid": "9aee0e91-1ce5-4c1a-b22b-93fd27041e94",
                "resourceVersion": "456",
                "creationTimestamp": "2021-06-27T12:35:17Z"
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "k8s.io-minikube-hostpath",
                "uid": "8909cd0d-ee27-4a9d-aac0-ae7426357a93",
                "apiVersion": "v1",
                "resourceVersion": "455"
            },
            "reason": "LeaderElection",
            "message": "minikube_4ad66829-b018-456a-b3b3-ca0adbee742d became leader",
            "source": {
                "component": "k8s.io/minikube-hostpath_minikube_4ad66829-b018-456a-b3b3-ca0adbee742d"
            },
            "firstTimestamp": "2021-06-27T12:35:17Z",
            "lastTimestamp": "2021-06-27T12:35:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-ztwgj.168c708bdb9ba3a0",
                "namespace": "kube-system",
                "uid": "52926d58-6454-4edc-81ab-ff35c38ff141",
                "resourceVersion": "418",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-ztwgj",
                "uid": "60172ad4-fe02-4b8e-888d-bae4bff5ad88",
                "apiVersion": "v1",
                "resourceVersion": "396"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kube-proxy-ztwgj to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2021-06-27T12:35:11Z",
            "lastTimestamp": "2021-06-27T12:35:11Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-ztwgj.168c708c4b752984",
                "namespace": "kube-system",
                "uid": "a886d728-8908-436a-891b-8b4ecf87d95f",
                "resourceVersion": "436",
                "creationTimestamp": "2021-06-27T12:35:13Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-ztwgj",
                "uid": "60172ad4-fe02-4b8e-888d-bae4bff5ad88",
                "apiVersion": "v1",
                "resourceVersion": "409",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/kube-proxy:v1.20.7\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:13Z",
            "lastTimestamp": "2021-06-27T12:35:13Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-ztwgj.168c708c509c9a77",
                "namespace": "kube-system",
                "uid": "f502ae95-02ed-4941-a7b3-48edab8564f5",
                "resourceVersion": "437",
                "creationTimestamp": "2021-06-27T12:35:13Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-ztwgj",
                "uid": "60172ad4-fe02-4b8e-888d-bae4bff5ad88",
                "apiVersion": "v1",
                "resourceVersion": "409",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Created",
            "message": "Created container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:13Z",
            "lastTimestamp": "2021-06-27T12:35:13Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy-ztwgj.168c708c7612e034",
                "namespace": "kube-system",
                "uid": "ce9c07bf-3415-42de-8519-a64c5572c3f6",
                "resourceVersion": "439",
                "creationTimestamp": "2021-06-27T12:35:14Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kube-proxy-ztwgj",
                "uid": "60172ad4-fe02-4b8e-888d-bae4bff5ad88",
                "apiVersion": "v1",
                "resourceVersion": "409",
                "fieldPath": "spec.containers{kube-proxy}"
            },
            "reason": "Started",
            "message": "Started container kube-proxy",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:14Z",
            "lastTimestamp": "2021-06-27T12:35:14Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-proxy.168c708bc9471989",
                "namespace": "kube-system",
                "uid": "d2e8957c-5e93-4514-a975-c5b0024bc1c8",
                "resourceVersion": "417",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "DaemonSet",
                "namespace": "kube-system",
                "name": "kube-proxy",
                "uid": "fd0f6859-043d-49cc-b480-98bba30cf730",
                "apiVersion": "apps/v1",
                "resourceVersion": "289"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kube-proxy-ztwgj",
            "source": {
                "component": "daemonset-controller"
            },
            "firstTimestamp": "2021-06-27T12:35:11Z",
            "lastTimestamp": "2021-06-27T12:35:11Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.168c7089cd4833fe",
                "namespace": "kube-system",
                "uid": "df7569b1-c2d7-4080-8248-67bbba1012c0",
                "resourceVersion": "361",
                "creationTimestamp": "2021-06-27T12:35:02Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "apiVersion": "v1",
                "resourceVersion": "342"
            },
            "reason": "FailedScheduling",
            "message": "0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2021-06-27T12:35:02Z",
            "lastTimestamp": "2021-06-27T12:35:09Z",
            "count": 3,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.168c708c907d7e4d",
                "namespace": "kube-system",
                "uid": "5620635d-1a30-4897-a973-64c8f5c8274c",
                "resourceVersion": "443",
                "creationTimestamp": "2021-06-27T12:35:14Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "apiVersion": "v1",
                "resourceVersion": "345"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/storage-provisioner to minikube",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2021-06-27T12:35:14Z",
            "lastTimestamp": "2021-06-27T12:35:14Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.168c708d1e8b4e17",
                "namespace": "kube-system",
                "uid": "5acd69f4-daf4-40a9-a42d-47ac77bbc15d",
                "resourceVersion": "449",
                "creationTimestamp": "2021-06-27T12:35:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "apiVersion": "v1",
                "resourceVersion": "442",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Pulled",
            "message": "Container image \"gcr.io/k8s-minikube/storage-provisioner:v5\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:16Z",
            "lastTimestamp": "2021-06-27T12:35:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.168c708d22df5a0e",
                "namespace": "kube-system",
                "uid": "cb42fa5a-c566-4fda-ba78-ef7f998793e2",
                "resourceVersion": "450",
                "creationTimestamp": "2021-06-27T12:35:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "apiVersion": "v1",
                "resourceVersion": "442",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Created",
            "message": "Created container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:17Z",
            "lastTimestamp": "2021-06-27T12:35:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "storage-provisioner.168c708d3ac5d7f2",
                "namespace": "kube-system",
                "uid": "0975e5ff-42db-438d-a17f-5f6a4b7ebd7e",
                "resourceVersion": "454",
                "creationTimestamp": "2021-06-27T12:35:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "storage-provisioner",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "apiVersion": "v1",
                "resourceVersion": "442",
                "fieldPath": "spec.containers{storage-provisioner}"
            },
            "reason": "Started",
            "message": "Started container storage-provisioner",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:17Z",
            "lastTimestamp": "2021-06-27T12:35:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "uid": "fed93eb3-6023-44f0-b452-6ae51fb64fd8",
                "resourceVersion": "284",
                "creationTimestamp": "2021-06-27T12:34:56Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "KubeDNS"
                },
                "annotations": {
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.96.0.10",
                "clusterIPs": [
                    "10.96.0.10"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "kube-proxy",
                "namespace": "kube-system",
                "uid": "fd0f6859-043d-49cc-b480-98bba30cf730",
                "resourceVersion": "441",
                "generation": 1,
                "creationTimestamp": "2021-06-27T12:34:57Z",
                "labels": {
                    "k8s-app": "kube-proxy"
                },
                "annotations": {
                    "deprecated.daemonset.template.generation": "1"
                }
            },
            "spec": {
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-proxy"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-proxy"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kube-proxy",
                                "configMap": {
                                    "name": "kube-proxy",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "xtables-lock",
                                "hostPath": {
                                    "path": "/run/xtables.lock",
                                    "type": "FileOrCreate"
                                }
                            },
                            {
                                "name": "lib-modules",
                                "hostPath": {
                                    "path": "/lib/modules",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "kube-proxy",
                                "image": "k8s.gcr.io/kube-proxy:v1.20.7",
                                "command": [
                                    "/usr/local/bin/kube-proxy",
                                    "--config=/var/lib/kube-proxy/config.conf",
                                    "--hostname-override=$(NODE_NAME)"
                                ],
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kube-proxy",
                                        "mountPath": "/var/lib/kube-proxy"
                                    },
                                    {
                                        "name": "xtables-lock",
                                        "mountPath": "/run/xtables.lock"
                                    },
                                    {
                                        "name": "lib-modules",
                                        "readOnly": true,
                                        "mountPath": "/lib/modules"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "privileged": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "kube-proxy",
                        "serviceAccount": "kube-proxy",
                        "hostNetwork": true,
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-node-critical"
                    }
                },
                "updateStrategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1
                    }
                },
                "revisionHistoryLimit": 10
            },
            "status": {
                "currentNumberScheduled": 1,
                "numberMisscheduled": 0,
                "desiredNumberScheduled": 1,
                "numberReady": 1,
                "observedGeneration": 1,
                "updatedNumberScheduled": 1,
                "numberAvailable": 1
            }
        }
    ]
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "uid": "2eb3cc01-5568-44fd-a91e-c90ce122a640",
                "resourceVersion": "464",
                "generation": 2,
                "creationTimestamp": "2021-06-27T12:34:56Z",
                "labels": {
                    "k8s-app": "kube-dns"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 1,
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2021-06-27T12:35:11Z",
                        "lastTransitionTime": "2021-06-27T12:35:11Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2021-06-27T12:35:19Z",
                        "lastTransitionTime": "2021-06-27T12:35:11Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-74ff55c5b\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "707"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-74ff55c5b",
                "namespace": "kube-system",
                "uid": "40531e7e-c13b-4cb2-ab87-0fcf6d4365af",
                "resourceVersion": "461",
                "generation": 1,
                "creationTimestamp": "2021-06-27T12:35:11Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "74ff55c5b"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "2eb3cc01-5568-44fd-a91e-c90ce122a640",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "74ff55c5b"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "74ff55c5b"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "k8s.gcr.io/coredns:1.7.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "nodeSelector": {
                            "kubernetes.io/os": "linux"
                        },
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            },
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "node-role.kubernetes.io/control-plane",
                                "effect": "NoSchedule"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-74ff55c5b-bsdwv",
                "generateName": "coredns-74ff55c5b-",
                "namespace": "kube-system",
                "uid": "f051391d-3b6e-4b80-b065-9640361300f6",
                "resourceVersion": "460",
                "creationTimestamp": "2021-06-27T12:35:11Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "74ff55c5b"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-74ff55c5b",
                        "uid": "40531e7e-c13b-4cb2-ab87-0fcf6d4365af",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-qgl9z",
                        "secret": {
                            "secretName": "coredns-token-qgl9z",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-qgl9z",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "minikube",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node-role.kubernetes.io/control-plane",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:11Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:19Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:19Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:11Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "172.17.0.2",
                "podIPs": [
                    {
                        "ip": "172.17.0.2"
                    }
                ],
                "startTime": "2021-06-27T12:35:11Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:35:16Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/coredns:1.7.0",
                        "imageID": "docker-pullable://k8s.gcr.io/coredns@sha256:73ca82b4ce829766d4f1f10947c3a338888f876fbed0540dc849c89ff256e90c",
                        "containerID": "docker://7e2386c19a931ee60fba3b13a3b6187e4d079c1424463da0795071d726ab1539",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "etcd-minikube",
                "namespace": "kube-system",
                "uid": "0588f573-ae44-4fce-be5f-c80c78b667c3",
                "resourceVersion": "511",
                "creationTimestamp": "2021-06-27T12:35:00Z",
                "labels": {
                    "component": "etcd",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://192.168.99.101:2379",
                    "kubernetes.io/config.hash": "4bec6a5a4609a6167d5613bc9ebb1a9e",
                    "kubernetes.io/config.mirror": "4bec6a5a4609a6167d5613bc9ebb1a9e",
                    "kubernetes.io/config.seen": "2021-06-27T12:34:58.248407815Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "etcd-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "etcd-data",
                        "hostPath": {
                            "path": "/var/lib/minikube/etcd",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "etcd",
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "command": [
                            "etcd",
                            "--advertise-client-urls=https://192.168.99.101:2379",
                            "--cert-file=/var/lib/minikube/certs/etcd/server.crt",
                            "--client-cert-auth=true",
                            "--data-dir=/var/lib/minikube/etcd",
                            "--initial-advertise-peer-urls=https://192.168.99.101:2380",
                            "--initial-cluster=minikube=https://192.168.99.101:2380",
                            "--key-file=/var/lib/minikube/certs/etcd/server.key",
                            "--listen-client-urls=https://127.0.0.1:2379,https://192.168.99.101:2379",
                            "--listen-metrics-urls=http://127.0.0.1:2381",
                            "--listen-peer-urls=https://192.168.99.101:2380",
                            "--name=minikube",
                            "--peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt",
                            "--peer-client-cert-auth=true",
                            "--peer-key-file=/var/lib/minikube/certs/etcd/peer.key",
                            "--peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt",
                            "--proxy-refresh-interval=70000",
                            "--snapshot-count=10000",
                            "--trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m",
                                "ephemeral-storage": "100Mi",
                                "memory": "100Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "etcd-data",
                                "mountPath": "/var/lib/minikube/etcd"
                            },
                            {
                                "name": "etcd-certs",
                                "mountPath": "/var/lib/minikube/certs/etcd"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 2381,
                                "host": "127.0.0.1",
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:00Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:25Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:25Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:00Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:00Z",
                "containerStatuses": [
                    {
                        "name": "etcd",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:34:23Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/etcd:3.4.13-0",
                        "imageID": "docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                        "containerID": "docker://6b9b439692d423e64d97438289f7064905d0361d102d67768834f44e7c5ff0c9",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-apiserver-minikube",
                "namespace": "kube-system",
                "uid": "3a75ab4e-3509-4e74-8139-a425b6bb3152",
                "resourceVersion": "351",
                "creationTimestamp": "2021-06-27T12:35:00Z",
                "labels": {
                    "component": "kube-apiserver",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "192.168.99.101:8443",
                    "kubernetes.io/config.hash": "a1bfd99e9cf8084bb99935e06c54a6d8",
                    "kubernetes.io/config.mirror": "a1bfd99e9cf8084bb99935e06c54a6d8",
                    "kubernetes.io/config.seen": "2021-06-27T12:34:58.248413733Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-apiserver",
                        "image": "k8s.gcr.io/kube-apiserver:v1.20.7",
                        "command": [
                            "kube-apiserver",
                            "--advertise-address=192.168.99.101",
                            "--allow-privileged=true",
                            "--authorization-mode=Node,RBAC",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota",
                            "--enable-bootstrap-token-auth=true",
                            "--etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt",
                            "--etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt",
                            "--etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key",
                            "--etcd-servers=https://127.0.0.1:2379",
                            "--insecure-port=0",
                            "--kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt",
                            "--kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key",
                            "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                            "--proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt",
                            "--proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key",
                            "--requestheader-allowed-names=front-proxy-client",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                            "--requestheader-group-headers=X-Remote-Group",
                            "--requestheader-username-headers=X-Remote-User",
                            "--secure-port=8443",
                            "--service-account-issuer=https://kubernetes.default.svc.cluster.local",
                            "--service-account-key-file=/var/lib/minikube/certs/sa.pub",
                            "--service-account-signing-key-file=/var/lib/minikube/certs/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--tls-cert-file=/var/lib/minikube/certs/apiserver.crt",
                            "--tls-private-key-file=/var/lib/minikube/certs/apiserver.key"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "250m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.99.101",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/readyz",
                                "port": 8443,
                                "host": "192.168.99.101",
                                "scheme": "HTTPS"
                            },
                            "timeoutSeconds": 15,
                            "periodSeconds": 1,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/livez",
                                "port": 8443,
                                "host": "192.168.99.101",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:01Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:05Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:05Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:01Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:01Z",
                "containerStatuses": [
                    {
                        "name": "kube-apiserver",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:34:22Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-apiserver:v1.20.7",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-apiserver@sha256:5ab3d676c426bfb272fb7605e6978b90d5676913636a6105688862849961386f",
                        "containerID": "docker://a491e1cc9174c065c3ce9e66d995a7f0cad97ba92feb8d4425cbc72a20b7152f",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-controller-manager-minikube",
                "namespace": "kube-system",
                "uid": "a3f87594-739c-4117-a7f7-160f15ba94af",
                "resourceVersion": "509",
                "creationTimestamp": "2021-06-27T12:35:00Z",
                "labels": {
                    "component": "kube-controller-manager",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "766d89e06cfbbb7379ed1ac3b6796632",
                    "kubernetes.io/config.mirror": "766d89e06cfbbb7379ed1ac3b6796632",
                    "kubernetes.io/config.seen": "2021-06-27T12:34:58.248419785Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "ca-certs",
                        "hostPath": {
                            "path": "/etc/ssl/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "flexvolume-dir",
                        "hostPath": {
                            "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "k8s-certs",
                        "hostPath": {
                            "path": "/var/lib/minikube/certs",
                            "type": "DirectoryOrCreate"
                        }
                    },
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/controller-manager.conf",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "usr-share-ca-certificates",
                        "hostPath": {
                            "path": "/usr/share/ca-certificates",
                            "type": "DirectoryOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-controller-manager",
                        "image": "k8s.gcr.io/kube-controller-manager:v1.20.7",
                        "command": [
                            "kube-controller-manager",
                            "--allocate-node-cidrs=true",
                            "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--bind-address=127.0.0.1",
                            "--client-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-cidr=10.244.0.0/16",
                            "--cluster-name=mk",
                            "--cluster-signing-cert-file=/var/lib/minikube/certs/ca.crt",
                            "--cluster-signing-key-file=/var/lib/minikube/certs/ca.key",
                            "--controllers=*,bootstrapsigner,tokencleaner",
                            "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                            "--leader-elect=false",
                            "--port=0",
                            "--requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt",
                            "--root-ca-file=/var/lib/minikube/certs/ca.crt",
                            "--service-account-private-key-file=/var/lib/minikube/certs/sa.key",
                            "--service-cluster-ip-range=10.96.0.0/12",
                            "--use-service-account-credentials=true"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "200m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "ca-certs",
                                "readOnly": true,
                                "mountPath": "/etc/ssl/certs"
                            },
                            {
                                "name": "flexvolume-dir",
                                "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                            },
                            {
                                "name": "k8s-certs",
                                "readOnly": true,
                                "mountPath": "/var/lib/minikube/certs"
                            },
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/controller-manager.conf"
                            },
                            {
                                "name": "usr-share-ca-certificates",
                                "readOnly": true,
                                "mountPath": "/usr/share/ca-certificates"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10257,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:01Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:24Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:24Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:01Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:01Z",
                "containerStatuses": [
                    {
                        "name": "kube-controller-manager",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:34:22Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-controller-manager:v1.20.7",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:eb9b121cbe40cf9016b95cefd34fb9e62c4caf1516188a98b64f091d871a2d46",
                        "containerID": "docker://0c3a28ddafa1c9ba6766650b69538a12c5a0e8b1b91efe5b6fcbf1ea16cc96bf",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "kube-proxy-ztwgj",
                "generateName": "kube-proxy-",
                "namespace": "kube-system",
                "uid": "60172ad4-fe02-4b8e-888d-bae4bff5ad88",
                "resourceVersion": "440",
                "creationTimestamp": "2021-06-27T12:35:11Z",
                "labels": {
                    "controller-revision-hash": "5bd89cc4b7",
                    "k8s-app": "kube-proxy",
                    "pod-template-generation": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "DaemonSet",
                        "name": "kube-proxy",
                        "uid": "fd0f6859-043d-49cc-b480-98bba30cf730",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kube-proxy",
                        "configMap": {
                            "name": "kube-proxy",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "xtables-lock",
                        "hostPath": {
                            "path": "/run/xtables.lock",
                            "type": "FileOrCreate"
                        }
                    },
                    {
                        "name": "lib-modules",
                        "hostPath": {
                            "path": "/lib/modules",
                            "type": ""
                        }
                    },
                    {
                        "name": "kube-proxy-token-kkspl",
                        "secret": {
                            "secretName": "kube-proxy-token-kkspl",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-proxy",
                        "image": "k8s.gcr.io/kube-proxy:v1.20.7",
                        "command": [
                            "/usr/local/bin/kube-proxy",
                            "--config=/var/lib/kube-proxy/config.conf",
                            "--hostname-override=$(NODE_NAME)"
                        ],
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kube-proxy",
                                "mountPath": "/var/lib/kube-proxy"
                            },
                            {
                                "name": "xtables-lock",
                                "mountPath": "/run/xtables.lock"
                            },
                            {
                                "name": "lib-modules",
                                "readOnly": true,
                                "mountPath": "/lib/modules"
                            },
                            {
                                "name": "kube-proxy-token-kkspl",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "privileged": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeSelector": {
                    "kubernetes.io/os": "linux"
                },
                "serviceAccountName": "kube-proxy",
                "serviceAccount": "kube-proxy",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "affinity": {
                    "nodeAffinity": {
                        "requiredDuringSchedulingIgnoredDuringExecution": {
                            "nodeSelectorTerms": [
                                {
                                    "matchFields": [
                                        {
                                            "key": "metadata.name",
                                            "operator": "In",
                                            "values": [
                                                "minikube"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute"
                    },
                    {
                        "key": "node.kubernetes.io/disk-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/memory-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/pid-pressure",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/unschedulable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/network-unavailable",
                        "operator": "Exists",
                        "effect": "NoSchedule"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:11Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:14Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:14Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:11Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:11Z",
                "containerStatuses": [
                    {
                        "name": "kube-proxy",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:35:14Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-proxy:v1.20.7",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:5d2be61150535ed37b7a5fa5a8239f89afee505ab2fae05247447851eed710a8",
                        "containerID": "docker://6a8946c20ed05f263942c61a6c16086f0e3cf0f66839eac209da794e59ff5d4e",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kube-scheduler-minikube",
                "namespace": "kube-system",
                "uid": "6d2a31e3-2a76-42a6-9429-bc5085baebfb",
                "resourceVersion": "506",
                "creationTimestamp": "2021-06-27T12:35:00Z",
                "labels": {
                    "component": "kube-scheduler",
                    "tier": "control-plane"
                },
                "annotations": {
                    "kubernetes.io/config.hash": "82ed17c7f4a56a29330619386941d47e",
                    "kubernetes.io/config.mirror": "82ed17c7f4a56a29330619386941d47e",
                    "kubernetes.io/config.seen": "2021-06-27T12:34:58.248396410Z",
                    "kubernetes.io/config.source": "file"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "v1",
                        "kind": "Node",
                        "name": "minikube",
                        "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                        "controller": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubeconfig",
                        "hostPath": {
                            "path": "/etc/kubernetes/scheduler.conf",
                            "type": "FileOrCreate"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kube-scheduler",
                        "image": "k8s.gcr.io/kube-scheduler:v1.20.7",
                        "command": [
                            "kube-scheduler",
                            "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--bind-address=127.0.0.1",
                            "--kubeconfig=/etc/kubernetes/scheduler.conf",
                            "--leader-elect=false",
                            "--port=0"
                        ],
                        "resources": {
                            "requests": {
                                "cpu": "100m"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "kubeconfig",
                                "readOnly": true,
                                "mountPath": "/etc/kubernetes/scheduler.conf"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 8
                        },
                        "startupProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10259,
                                "host": "127.0.0.1",
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 15,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 24
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "operator": "Exists",
                        "effect": "NoExecute"
                    }
                ],
                "priorityClassName": "system-node-critical",
                "priority": 2000001000,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:00Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:22Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:36:22Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:00Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:00Z",
                "containerStatuses": [
                    {
                        "name": "kube-scheduler",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:34:24Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/kube-scheduler:v1.20.7",
                        "imageID": "docker-pullable://k8s.gcr.io/kube-scheduler@sha256:6fdb12580353b6cd59de486ca650e3ba9270bc8d52f1d3052cd9bb1d4f28e189",
                        "containerID": "docker://fc2aef1b70b492e817d0a2a829f848b4829c3fc44a2dbeb78c893a41c3f84b64",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "storage-provisioner",
                "namespace": "kube-system",
                "uid": "f860a0ac-f6ce-4eac-95c7-0d57ea0cd6ce",
                "resourceVersion": "457",
                "creationTimestamp": "2021-06-27T12:35:02Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "integration-test": "storage-provisioner"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"integration-test\":\"storage-provisioner\"},\"name\":\"storage-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"containers\":[{\"command\":[\"/storage-provisioner\"],\"image\":\"gcr.io/k8s-minikube/storage-provisioner:v5\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"storage-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp\"}]}],\"hostNetwork\":true,\"serviceAccountName\":\"storage-provisioner\",\"volumes\":[{\"hostPath\":{\"path\":\"/tmp\",\"type\":\"Directory\"},\"name\":\"tmp\"}]}}\n"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp",
                        "hostPath": {
                            "path": "/tmp",
                            "type": "Directory"
                        }
                    },
                    {
                        "name": "storage-provisioner-token-c9vfh",
                        "secret": {
                            "secretName": "storage-provisioner-token-c9vfh",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "storage-provisioner",
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v5",
                        "command": [
                            "/storage-provisioner"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "storage-provisioner-token-c9vfh",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "storage-provisioner",
                "serviceAccount": "storage-provisioner",
                "nodeName": "minikube",
                "hostNetwork": true,
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true,
                "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:14Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:18Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:18Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2021-06-27T12:35:14Z"
                    }
                ],
                "hostIP": "192.168.99.101",
                "podIP": "192.168.99.101",
                "podIPs": [
                    {
                        "ip": "192.168.99.101"
                    }
                ],
                "startTime": "2021-06-27T12:35:14Z",
                "containerStatuses": [
                    {
                        "name": "storage-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2021-06-27T12:35:17Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "gcr.io/k8s-minikube/storage-provisioner:v5",
                        "imageID": "docker-pullable://gcr.io/k8s-minikube/storage-provisioner@sha256:18eb69d1418e854ad5a19e399310e52808a8321e4c441c1dddad8977a0d7a944",
                        "containerID": "docker://315998caa74179609b14f6809554a0e70f131d6b19ecfb551bcdf6ccc39b8a6e",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-74ff55c5b-bsdwv ====
.:53
[INFO] plugin/reload: Running configuration MD5 = fdf6a6d628bad4e1b40979090ddbccba
CoreDNS-1.7.0
linux/amd64, go1.14.4, f59c03d
==== END logs for container coredns of pod kube-system/coredns-74ff55c5b-bsdwv ====
==== START logs for container etcd of pod kube-system/etcd-minikube ====
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2021-06-27 12:34:23.429624 I | etcdmain: etcd Version: 3.4.13
2021-06-27 12:34:23.429688 I | etcdmain: Git SHA: ae9734ed2
2021-06-27 12:34:23.429703 I | etcdmain: Go Version: go1.12.17
2021-06-27 12:34:23.429716 I | etcdmain: Go OS/Arch: linux/amd64
2021-06-27 12:34:23.429729 I | etcdmain: setting maximum number of CPUs to 2, total number of available CPUs is 2
[WARNING] Deprecated '--logger=capnslog' flag is set; use '--logger=zap' flag instead
2021-06-27 12:34:23.429880 I | embed: peerTLS: cert = /var/lib/minikube/certs/etcd/peer.crt, key = /var/lib/minikube/certs/etcd/peer.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2021-06-27 12:34:23.443219 I | embed: name = minikube
2021-06-27 12:34:23.443238 I | embed: data dir = /var/lib/minikube/etcd
2021-06-27 12:34:23.443252 I | embed: member dir = /var/lib/minikube/etcd/member
2021-06-27 12:34:23.443265 I | embed: heartbeat = 100ms
2021-06-27 12:34:23.443277 I | embed: election = 1000ms
2021-06-27 12:34:23.443289 I | embed: snapshot count = 10000
2021-06-27 12:34:23.443311 I | embed: advertise client URLs = https://192.168.99.101:2379
2021-06-27 12:34:23.473783 I | etcdserver: starting member 171ef35542ebf92b in cluster 7167b1fe5841b98b
raft2021/06/27 12:34:23 INFO: 171ef35542ebf92b switched to configuration voters=()
raft2021/06/27 12:34:23 INFO: 171ef35542ebf92b became follower at term 0
raft2021/06/27 12:34:23 INFO: newRaft 171ef35542ebf92b [peers: [], term: 0, commit: 0, applied: 0, lastindex: 0, lastterm: 0]
raft2021/06/27 12:34:23 INFO: 171ef35542ebf92b became follower at term 1
raft2021/06/27 12:34:23 INFO: 171ef35542ebf92b switched to configuration voters=(1666036459694192939)
2021-06-27 12:34:23.496891 W | auth: simple token is not cryptographically signed
2021-06-27 12:34:23.569303 I | etcdserver: starting server... [version: 3.4.13, cluster version: to_be_decided]
2021-06-27 12:34:23.649217 I | etcdserver: 171ef35542ebf92b as single-node; fast-forwarding 9 ticks (election ticks 10)
raft2021/06/27 12:34:23 INFO: 171ef35542ebf92b switched to configuration voters=(1666036459694192939)
2021-06-27 12:34:23.656662 I | etcdserver/membership: added member 171ef35542ebf92b [https://192.168.99.101:2380] to cluster 7167b1fe5841b98b
2021-06-27 12:34:23.663349 I | embed: ClientTLS: cert = /var/lib/minikube/certs/etcd/server.crt, key = /var/lib/minikube/certs/etcd/server.key, trusted-ca = /var/lib/minikube/certs/etcd/ca.crt, client-cert-auth = true, crl-file = 
2021-06-27 12:34:23.668352 I | embed: listening for peers on 192.168.99.101:2380
2021-06-27 12:34:23.668642 I | embed: listening for metrics on http://127.0.0.1:2381
raft2021/06/27 12:34:24 INFO: 171ef35542ebf92b is starting a new election at term 1
raft2021/06/27 12:34:24 INFO: 171ef35542ebf92b became candidate at term 2
raft2021/06/27 12:34:24 INFO: 171ef35542ebf92b received MsgVoteResp from 171ef35542ebf92b at term 2
raft2021/06/27 12:34:24 INFO: 171ef35542ebf92b became leader at term 2
raft2021/06/27 12:34:24 INFO: raft.node: 171ef35542ebf92b elected leader 171ef35542ebf92b at term 2
2021-06-27 12:34:24.491700 I | etcdserver: published {Name:minikube ClientURLs:[https://192.168.99.101:2379]} to cluster 7167b1fe5841b98b
2021-06-27 12:34:24.494399 I | embed: ready to serve client requests
2021-06-27 12:34:24.496152 I | etcdserver: setting up the initial cluster version to 3.4
2021-06-27 12:34:24.498301 N | etcdserver/membership: set the initial cluster version to 3.4
2021-06-27 12:34:24.498441 I | etcdserver/api: enabled capabilities for version 3.4
2021-06-27 12:34:24.498464 I | embed: ready to serve client requests
2021-06-27 12:34:24.510579 I | embed: serving client requests on 127.0.0.1:2379
2021-06-27 12:34:24.578602 I | embed: serving client requests on 192.168.99.101:2379
2021-06-27 12:34:36.655492 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:34:46.605110 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:03.229413 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:08.916399 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:18.917098 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:28.918204 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:38.916395 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:48.917181 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:35:58.998381 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:08.916873 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:18.918154 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:28.917114 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:38.917082 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:48.917623 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:36:58.917391 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:08.918789 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:18.917729 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:28.916522 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:38.916330 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:48.916449 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:37:58.917414 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:08.917708 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:18.916916 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:28.916431 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:38.919100 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:48.916788 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:38:58.917472 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:08.916526 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:18.917217 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:28.917644 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:38.917625 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:48.916229 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:39:58.916565 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:08.918279 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:18.916489 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:28.917133 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:38.916527 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:48.916263 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:40:58.917237 I | etcdserver/api/etcdhttp: /health OK (status code 200)
2021-06-27 12:41:08.916946 I | etcdserver/api/etcdhttp: /health OK (status code 200)
==== END logs for container etcd of pod kube-system/etcd-minikube ====
==== START logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
Flag --insecure-port has been deprecated, This flag has no effect now and will be removed in v1.24.
I0627 12:34:23.019851       1 server.go:632] external host was not specified, using 192.168.99.101
I0627 12:34:23.020854       1 server.go:182] Version: v1.20.7
I0627 12:34:26.712785       1 shared_informer.go:240] Waiting for caches to sync for node_authorizer
I0627 12:34:26.715802       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0627 12:34:26.715836       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0627 12:34:26.722390       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0627 12:34:26.722466       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0627 12:34:26.785015       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:26.786113       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:26.879998       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:26.880153       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:26.953613       1 client.go:360] parsed scheme: "passthrough"
I0627 12:34:26.954038       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:34:26.954407       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:34:26.959735       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:26.959883       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.342483       1 instance.go:289] Using reconciler: lease
I0627 12:34:27.343571       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.343634       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.408640       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.408754       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.503304       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.503400       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.573683       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.573846       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.658300       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.658474       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.708680       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.708770       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.826421       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.826577       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.920083       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.922155       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:27.998845       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:27.999603       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.085640       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.085848       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.162884       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.163513       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.232417       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.232504       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.336941       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.337261       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.434944       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.435138       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.521997       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.526532       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.598948       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.599014       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.683353       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.683624       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.777898       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.777978       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.847243       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:28.847795       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:28.946014       1 rest.go:131] the default service ipfamily for this cluster is: IPv4
I0627 12:34:29.695231       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:29.696916       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:29.753228       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:29.758658       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:29.873415       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:29.873941       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:29.970016       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:29.970546       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.058889       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.059386       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.133705       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.134113       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.227672       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.227912       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.261572       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.261708       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.309913       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.310190       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.350573       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.352808       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.401574       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.402594       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.450993       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.451978       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.492055       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.492139       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.534181       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.534265       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.582459       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.583035       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.627870       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.627955       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.666181       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.666289       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.749895       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.749963       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.787269       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.787353       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.836564       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.836820       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.875729       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.875876       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.917710       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.917882       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.957724       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.957850       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:30.999746       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:30.999828       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.047417       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.047473       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.103492       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.103580       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.195689       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.195777       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.266947       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.267036       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.332090       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.335555       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.430309       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.431026       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.539989       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.540173       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.647812       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.647930       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.765466       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.765590       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.829096       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.829183       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.883414       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.883555       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.929444       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.929531       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:31.998416       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:31.998503       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.058398       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.058541       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.115854       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.115935       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.159860       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.160000       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.202375       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.202709       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.310793       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.311381       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.355213       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.355670       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.413042       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.413428       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.496423       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.496476       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.583665       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.583895       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.645774       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.645913       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.693605       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.693833       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.739945       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.742380       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.789265       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.789414       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:32.832407       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:32.833231       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
W0627 12:34:33.825457       1 genericapiserver.go:425] Skipping API batch/v2alpha1 because it has no resources.
W0627 12:34:33.870165       1 genericapiserver.go:425] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:33.927390       1 genericapiserver.go:425] Skipping API node.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:33.969814       1 genericapiserver.go:425] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:33.983576       1 genericapiserver.go:425] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:34.010718       1 genericapiserver.go:425] Skipping API storage.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:34.023509       1 genericapiserver.go:425] Skipping API flowcontrol.apiserver.k8s.io/v1alpha1 because it has no resources.
W0627 12:34:34.051933       1 genericapiserver.go:425] Skipping API apps/v1beta2 because it has no resources.
W0627 12:34:34.052372       1 genericapiserver.go:425] Skipping API apps/v1beta1 because it has no resources.
I0627 12:34:34.105425       1 plugins.go:158] Loaded 12 mutating admission controller(s) successfully in the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,RuntimeClass,DefaultIngressClass,MutatingAdmissionWebhook.
I0627 12:34:34.105856       1 plugins.go:161] Loaded 10 validating admission controller(s) successfully in the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,RuntimeClass,CertificateApproval,CertificateSigning,CertificateSubjectRestriction,ValidatingAdmissionWebhook,ResourceQuota.
I0627 12:34:34.114242       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:34.114608       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:34.149666       1 client.go:360] parsed scheme: "endpoint"
I0627 12:34:34.149978       1 endpoint.go:68] ccResolverWrapper: sending new addresses to cc: [{https://127.0.0.1:2379  <nil> 0 <nil>}]
I0627 12:34:50.163507       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0627 12:34:50.163931       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I0627 12:34:50.164833       1 dynamic_serving_content.go:130] Starting serving-cert::/var/lib/minikube/certs/apiserver.crt::/var/lib/minikube/certs/apiserver.key
I0627 12:34:50.167194       1 secure_serving.go:197] Serving securely on [::]:8443
I0627 12:34:50.167573       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I0627 12:34:50.167932       1 controller.go:83] Starting OpenAPI AggregationController
I0627 12:34:50.169235       1 apf_controller.go:261] Starting API Priority and Fairness config controller
I0627 12:34:50.169598       1 apiservice_controller.go:97] Starting APIServiceRegistrationController
I0627 12:34:50.169894       1 cache.go:32] Waiting for caches to sync for APIServiceRegistrationController controller
I0627 12:34:50.170322       1 customresource_discovery_controller.go:209] Starting DiscoveryController
I0627 12:34:50.194653       1 dynamic_serving_content.go:130] Starting aggregator-proxy-cert::/var/lib/minikube/certs/front-proxy-client.crt::/var/lib/minikube/certs/front-proxy-client.key
I0627 12:34:50.194980       1 available_controller.go:475] Starting AvailableConditionController
I0627 12:34:50.195445       1 cache.go:32] Waiting for caches to sync for AvailableConditionController controller
I0627 12:34:50.197318       1 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller
I0627 12:34:50.197407       1 shared_informer.go:240] Waiting for caches to sync for cluster_authentication_trust_controller
I0627 12:34:50.197594       1 autoregister_controller.go:141] Starting autoregister controller
I0627 12:34:50.197770       1 cache.go:32] Waiting for caches to sync for autoregister controller
E0627 12:34:50.219349       1 controller.go:152] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.99.101, ResourceVersion: 0, AdditionalErrorMsg: 
I0627 12:34:50.571810       1 controller.go:86] Starting OpenAPI controller
I0627 12:34:50.572288       1 naming_controller.go:291] Starting NamingConditionController
I0627 12:34:50.572420       1 establishing_controller.go:76] Starting EstablishingController
I0627 12:34:50.572762       1 nonstructuralschema_controller.go:192] Starting NonStructuralSchemaConditionController
I0627 12:34:50.573008       1 apiapproval_controller.go:186] Starting KubernetesAPIApprovalPolicyConformantConditionController
I0627 12:34:50.573122       1 crd_finalizer.go:266] Starting CRDFinalizer
I0627 12:34:50.594313       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I0627 12:34:50.594891       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0627 12:34:50.597377       1 crdregistration_controller.go:111] Starting crd-autoregister controller
I0627 12:34:50.597790       1 shared_informer.go:240] Waiting for caches to sync for crd-autoregister
I0627 12:34:50.913249       1 shared_informer.go:247] Caches are synced for node_authorizer 
I0627 12:34:50.915155       1 shared_informer.go:247] Caches are synced for cluster_authentication_trust_controller 
I0627 12:34:50.916466       1 shared_informer.go:247] Caches are synced for crd-autoregister 
I0627 12:34:50.916857       1 cache.go:39] Caches are synced for autoregister controller
I0627 12:34:50.981359       1 apf_controller.go:266] Running API Priority and Fairness config worker
I0627 12:34:51.008503       1 cache.go:39] Caches are synced for APIServiceRegistrationController controller
I0627 12:34:51.027920       1 cache.go:39] Caches are synced for AvailableConditionController controller
I0627 12:34:51.125842       1 controller.go:609] quota admission added evaluator for: namespaces
I0627 12:34:51.172812       1 controller.go:132] OpenAPI AggregationController: action for item : Nothing (removed from the queue).
I0627 12:34:51.172850       1 controller.go:132] OpenAPI AggregationController: action for item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).
I0627 12:34:51.378655       1 storage_scheduling.go:132] created PriorityClass system-node-critical with value 2000001000
I0627 12:34:51.553321       1 storage_scheduling.go:132] created PriorityClass system-cluster-critical with value 2000000000
I0627 12:34:51.559451       1 storage_scheduling.go:148] all system priority classes are created successfully or already exist.
I0627 12:34:53.376934       1 controller.go:609] quota admission added evaluator for: roles.rbac.authorization.k8s.io
I0627 12:34:53.528377       1 controller.go:609] quota admission added evaluator for: rolebindings.rbac.authorization.k8s.io
W0627 12:34:53.846678       1 lease.go:233] Resetting endpoints for master service "kubernetes" to [192.168.99.101]
I0627 12:34:53.879511       1 controller.go:609] quota admission added evaluator for: endpoints
I0627 12:34:53.918313       1 controller.go:609] quota admission added evaluator for: endpointslices.discovery.k8s.io
I0627 12:34:54.708983       1 controller.go:609] quota admission added evaluator for: serviceaccounts
I0627 12:34:56.907670       1 controller.go:609] quota admission added evaluator for: deployments.apps
I0627 12:34:57.151175       1 controller.go:609] quota admission added evaluator for: daemonsets.apps
I0627 12:34:58.619822       1 controller.go:609] quota admission added evaluator for: leases.coordination.k8s.io
I0627 12:35:05.537965       1 client.go:360] parsed scheme: "passthrough"
I0627 12:35:05.538052       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:35:05.538070       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:35:11.015487       1 controller.go:609] quota admission added evaluator for: controllerrevisions.apps
I0627 12:35:11.095944       1 controller.go:609] quota admission added evaluator for: replicasets.apps
I0627 12:35:42.606334       1 client.go:360] parsed scheme: "passthrough"
I0627 12:35:42.606646       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:35:42.606926       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:36:13.044582       1 client.go:360] parsed scheme: "passthrough"
I0627 12:36:13.046412       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:36:13.046460       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:36:49.573328       1 client.go:360] parsed scheme: "passthrough"
I0627 12:36:49.573818       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:36:49.573991       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:37:24.195410       1 client.go:360] parsed scheme: "passthrough"
I0627 12:37:24.195538       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:37:24.195620       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:38:00.427063       1 client.go:360] parsed scheme: "passthrough"
I0627 12:38:00.427230       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:38:00.427250       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:38:41.964230       1 client.go:360] parsed scheme: "passthrough"
I0627 12:38:41.964297       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:38:41.964570       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:39:21.521746       1 client.go:360] parsed scheme: "passthrough"
I0627 12:39:21.521805       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:39:21.521826       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:39:55.960168       1 client.go:360] parsed scheme: "passthrough"
I0627 12:39:55.960320       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:39:55.960349       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:40:27.188900       1 client.go:360] parsed scheme: "passthrough"
I0627 12:40:27.189001       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:40:27.189024       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
I0627 12:41:11.825546       1 client.go:360] parsed scheme: "passthrough"
I0627 12:41:11.825605       1 passthrough.go:48] ccResolverWrapper: sending update to cc: {[{https://127.0.0.1:2379  <nil> 0 <nil>}] <nil> <nil>}
I0627 12:41:11.825627       1 clientconn.go:948] ClientConn switching balancer to "pick_first"
==== END logs for container kube-apiserver of pod kube-system/kube-apiserver-minikube ====
==== START logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
Flag --port has been deprecated, see --secure-port instead.
I0627 12:34:25.906709       1 serving.go:331] Generated self-signed cert in-memory
I0627 12:34:30.175823       1 controllermanager.go:176] Version: v1.20.7
I0627 12:34:30.181718       1 dynamic_cafile_content.go:167] Starting request-header::/var/lib/minikube/certs/front-proxy-ca.crt
I0627 12:34:30.181849       1 dynamic_cafile_content.go:167] Starting client-ca-bundle::/var/lib/minikube/certs/ca.crt
I0627 12:34:30.184849       1 secure_serving.go:197] Serving securely on 127.0.0.1:10257
I0627 12:34:30.185172       1 tlsconfig.go:240] Starting DynamicServingCertificateController
W0627 12:34:40.187136       1 controllermanager.go:630] fetch api resource lists failed, use legacy client builder: Get "https://192.168.99.101:8443/api/v1?timeout=32s": net/http: TLS handshake timeout
I0627 12:34:54.673582       1 shared_informer.go:240] Waiting for caches to sync for tokens
I0627 12:34:54.777469       1 shared_informer.go:247] Caches are synced for tokens 
I0627 12:34:54.813783       1 controllermanager.go:554] Started "endpointslicemirroring"
I0627 12:34:54.814027       1 endpointslicemirroring_controller.go:211] Starting EndpointSliceMirroring controller
I0627 12:34:54.814070       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice_mirroring
I0627 12:34:55.330588       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for cronjobs.batch
I0627 12:34:55.330709       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for networkpolicies.networking.k8s.io
W0627 12:34:55.330733       1 shared_informer.go:494] resyncPeriod 16h5m12.437202825s is smaller than resyncCheckPeriod 20h54m30.279022247s and the informer has already started. Changing it to 20h54m30.279022247s
I0627 12:34:55.330838       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for roles.rbac.authorization.k8s.io
I0627 12:34:55.330885       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for jobs.batch
I0627 12:34:55.330929       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for statefulsets.apps
I0627 12:34:55.330975       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for leases.coordination.k8s.io
I0627 12:34:55.331221       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for limitranges
I0627 12:34:55.331305       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for poddisruptionbudgets.policy
I0627 12:34:55.331344       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for endpoints
I0627 12:34:55.331388       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for replicasets.apps
I0627 12:34:55.331434       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for ingresses.networking.k8s.io
I0627 12:34:55.331481       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for ingresses.extensions
I0627 12:34:55.331532       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for rolebindings.rbac.authorization.k8s.io
I0627 12:34:55.331572       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for endpointslices.discovery.k8s.io
W0627 12:34:55.331619       1 shared_informer.go:494] resyncPeriod 17h46m0.977740573s is smaller than resyncCheckPeriod 20h54m30.279022247s and the informer has already started. Changing it to 20h54m30.279022247s
I0627 12:34:55.331706       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for serviceaccounts
I0627 12:34:55.331779       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for daemonsets.apps
I0627 12:34:55.331828       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for controllerrevisions.apps
I0627 12:34:55.331947       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for podtemplates
I0627 12:34:55.332177       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for deployments.apps
I0627 12:34:55.332241       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for events.events.k8s.io
I0627 12:34:55.332292       1 resource_quota_monitor.go:229] QuotaMonitor created object count evaluator for horizontalpodautoscalers.autoscaling
I0627 12:34:55.332361       1 controllermanager.go:554] Started "resourcequota"
I0627 12:34:55.332713       1 resource_quota_controller.go:273] Starting resource quota controller
I0627 12:34:55.332726       1 shared_informer.go:240] Waiting for caches to sync for resource quota
I0627 12:34:55.332762       1 resource_quota_monitor.go:304] QuotaMonitor running
I0627 12:34:55.428072       1 node_lifecycle_controller.go:380] Sending events to api server.
I0627 12:34:55.428733       1 taint_manager.go:163] Sending events to api server.
I0627 12:34:55.428861       1 node_lifecycle_controller.go:508] Controller will reconcile labels.
I0627 12:34:55.428922       1 controllermanager.go:554] Started "nodelifecycle"
I0627 12:34:55.432997       1 node_lifecycle_controller.go:542] Starting node controller
I0627 12:34:55.434496       1 shared_informer.go:240] Waiting for caches to sync for taint
I0627 12:34:55.623154       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-serving"
I0627 12:34:55.624173       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-serving
I0627 12:34:55.626901       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I0627 12:34:55.634977       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kubelet-client"
I0627 12:34:55.635283       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kubelet-client
I0627 12:34:55.635413       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I0627 12:34:55.638019       1 certificate_controller.go:118] Starting certificate controller "csrsigning-kube-apiserver-client"
I0627 12:34:55.639787       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-kube-apiserver-client
I0627 12:34:55.640198       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I0627 12:34:55.641771       1 controllermanager.go:554] Started "csrsigning"
I0627 12:34:55.642222       1 certificate_controller.go:118] Starting certificate controller "csrsigning-legacy-unknown"
I0627 12:34:55.643428       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrsigning-legacy-unknown
I0627 12:34:55.642250       1 dynamic_serving_content.go:130] Starting csr-controller::/var/lib/minikube/certs/ca.crt::/var/lib/minikube/certs/ca.key
I0627 12:34:55.671207       1 node_lifecycle_controller.go:77] Sending events to api server
E0627 12:34:55.671617       1 core.go:232] failed to start cloud node lifecycle controller: no cloud provider provided
W0627 12:34:55.671751       1 controllermanager.go:546] Skipping "cloud-node-lifecycle"
I0627 12:34:55.743220       1 controllermanager.go:554] Started "replicationcontroller"
I0627 12:34:55.754997       1 replica_set.go:182] Starting replicationcontroller controller
I0627 12:34:55.755581       1 shared_informer.go:240] Waiting for caches to sync for ReplicationController
I0627 12:34:55.934495       1 controllermanager.go:554] Started "namespace"
I0627 12:34:55.934869       1 namespace_controller.go:200] Starting namespace controller
I0627 12:34:55.935089       1 shared_informer.go:240] Waiting for caches to sync for namespace
I0627 12:34:56.021000       1 controllermanager.go:554] Started "replicaset"
I0627 12:34:56.022116       1 replica_set.go:182] Starting replicaset controller
I0627 12:34:56.022839       1 shared_informer.go:240] Waiting for caches to sync for ReplicaSet
I0627 12:34:56.082511       1 controllermanager.go:554] Started "bootstrapsigner"
I0627 12:34:56.084598       1 shared_informer.go:240] Waiting for caches to sync for bootstrap_signer
I0627 12:34:56.155489       1 controllermanager.go:554] Started "clusterrole-aggregation"
I0627 12:34:56.155789       1 clusterroleaggregation_controller.go:149] Starting ClusterRoleAggregator
I0627 12:34:56.156426       1 shared_informer.go:240] Waiting for caches to sync for ClusterRoleAggregator
I0627 12:34:56.271702       1 controllermanager.go:554] Started "pv-protection"
I0627 12:34:56.272469       1 pv_protection_controller.go:83] Starting PV protection controller
I0627 12:34:56.272522       1 shared_informer.go:240] Waiting for caches to sync for PV protection
I0627 12:34:56.426712       1 controllermanager.go:554] Started "garbagecollector"
I0627 12:34:56.427533       1 garbagecollector.go:142] Starting garbage collector controller
I0627 12:34:56.427549       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
I0627 12:34:56.427585       1 graph_builder.go:289] GraphBuilder running
I0627 12:34:56.477540       1 request.go:655] Throttling request took 1.041121145s, request: GET:https://192.168.99.101:8443/apis/extensions/v1beta1?timeout=32s
I0627 12:34:56.638464       1 controllermanager.go:554] Started "deployment"
I0627 12:34:56.638564       1 deployment_controller.go:153] Starting deployment controller
I0627 12:34:56.638575       1 shared_informer.go:240] Waiting for caches to sync for deployment
I0627 12:34:57.043865       1 controllermanager.go:554] Started "disruption"
I0627 12:34:57.043997       1 disruption.go:331] Starting disruption controller
I0627 12:34:57.044018       1 shared_informer.go:240] Waiting for caches to sync for disruption
I0627 12:34:57.196990       1 controllermanager.go:554] Started "csrcleaner"
I0627 12:34:57.197164       1 cleaner.go:82] Starting CSR cleaner controller
I0627 12:34:57.445396       1 controllermanager.go:554] Started "pvc-protection"
I0627 12:34:57.445581       1 pvc_protection_controller.go:110] Starting PVC protection controller
I0627 12:34:57.445602       1 shared_informer.go:240] Waiting for caches to sync for PVC protection
I0627 12:34:57.693341       1 controllermanager.go:554] Started "daemonset"
I0627 12:34:57.693465       1 daemon_controller.go:285] Starting daemon sets controller
I0627 12:34:57.693479       1 shared_informer.go:240] Waiting for caches to sync for daemon sets
I0627 12:34:57.939921       1 controllermanager.go:554] Started "statefulset"
I0627 12:34:57.940178       1 stateful_set.go:146] Starting stateful set controller
I0627 12:34:57.940276       1 shared_informer.go:240] Waiting for caches to sync for stateful set
I0627 12:34:58.195357       1 controllermanager.go:554] Started "ttl"
I0627 12:34:58.195519       1 ttl_controller.go:121] Starting TTL controller
I0627 12:34:58.195536       1 shared_informer.go:240] Waiting for caches to sync for TTL
E0627 12:34:58.451103       1 core.go:92] Failed to start service controller: WARNING: no cloud provider provided, services of type LoadBalancer will fail
W0627 12:34:58.451131       1 controllermanager.go:546] Skipping "service"
W0627 12:34:58.451153       1 core.go:246] configure-cloud-routes is set, but no cloud provider specified. Will not configure cloud provider routes.
W0627 12:34:58.451168       1 controllermanager.go:546] Skipping "route"
I0627 12:34:58.689827       1 controllermanager.go:554] Started "attachdetach"
I0627 12:34:58.690642       1 attach_detach_controller.go:328] Starting attach detach controller
I0627 12:34:58.690657       1 shared_informer.go:240] Waiting for caches to sync for attach detach
I0627 12:34:58.944045       1 controllermanager.go:554] Started "endpoint"
I0627 12:34:58.944352       1 endpoints_controller.go:184] Starting endpoint controller
I0627 12:34:58.944368       1 shared_informer.go:240] Waiting for caches to sync for endpoint
I0627 12:34:59.193905       1 controllermanager.go:554] Started "tokencleaner"
I0627 12:34:59.193993       1 tokencleaner.go:118] Starting token cleaner controller
I0627 12:34:59.194008       1 shared_informer.go:240] Waiting for caches to sync for token_cleaner
I0627 12:34:59.194024       1 shared_informer.go:247] Caches are synced for token_cleaner 
I0627 12:34:59.350298       1 node_ipam_controller.go:91] Sending events to api server.
I0627 12:35:09.430709       1 range_allocator.go:82] Sending events to api server.
I0627 12:35:09.431119       1 range_allocator.go:116] No Secondary Service CIDR provided. Skipping filtering out secondary service addresses.
I0627 12:35:09.431169       1 controllermanager.go:554] Started "nodeipam"
I0627 12:35:09.431772       1 node_ipam_controller.go:159] Starting ipam controller
I0627 12:35:09.431788       1 shared_informer.go:240] Waiting for caches to sync for node
I0627 12:35:09.501422       1 controllermanager.go:554] Started "root-ca-cert-publisher"
I0627 12:35:09.501549       1 publisher.go:98] Starting root CA certificate configmap publisher
I0627 12:35:09.501803       1 shared_informer.go:240] Waiting for caches to sync for crt configmap
I0627 12:35:09.599019       1 controllermanager.go:554] Started "podgc"
I0627 12:35:09.599969       1 gc_controller.go:89] Starting GC controller
I0627 12:35:09.600013       1 shared_informer.go:240] Waiting for caches to sync for GC
I0627 12:35:09.664930       1 controllermanager.go:554] Started "csrapproving"
W0627 12:35:09.665194       1 controllermanager.go:546] Skipping "ttl-after-finished"
W0627 12:35:09.665415       1 controllermanager.go:546] Skipping "ephemeral-volume"
I0627 12:35:09.665912       1 certificate_controller.go:118] Starting certificate controller "csrapproving"
I0627 12:35:09.666262       1 shared_informer.go:240] Waiting for caches to sync for certificate-csrapproving
I0627 12:35:09.769392       1 controllermanager.go:554] Started "endpointslice"
I0627 12:35:09.769597       1 endpointslice_controller.go:237] Starting endpoint slice controller
I0627 12:35:09.770193       1 shared_informer.go:240] Waiting for caches to sync for endpoint_slice
I0627 12:35:09.944370       1 controllermanager.go:554] Started "serviceaccount"
I0627 12:35:09.945929       1 serviceaccounts_controller.go:117] Starting service account controller
I0627 12:35:09.946274       1 shared_informer.go:240] Waiting for caches to sync for service account
I0627 12:35:10.004328       1 controllermanager.go:554] Started "job"
I0627 12:35:10.004702       1 job_controller.go:148] Starting job controller
I0627 12:35:10.004715       1 shared_informer.go:240] Waiting for caches to sync for job
I0627 12:35:10.125209       1 controllermanager.go:554] Started "horizontalpodautoscaling"
I0627 12:35:10.125751       1 horizontal.go:169] Starting HPA controller
I0627 12:35:10.129510       1 shared_informer.go:240] Waiting for caches to sync for HPA
I0627 12:35:10.288524       1 controllermanager.go:554] Started "cronjob"
I0627 12:35:10.288791       1 cronjob_controller.go:96] Starting CronJob Manager
I0627 12:35:10.550432       1 controllermanager.go:554] Started "persistentvolume-binder"
I0627 12:35:10.550765       1 pv_controller_base.go:307] Starting persistent volume controller
I0627 12:35:10.550856       1 shared_informer.go:240] Waiting for caches to sync for persistent volume
I0627 12:35:10.794037       1 controllermanager.go:554] Started "persistentvolume-expander"
I0627 12:35:10.795633       1 expand_controller.go:310] Starting expand controller
I0627 12:35:10.795652       1 shared_informer.go:240] Waiting for caches to sync for expand
I0627 12:35:10.796383       1 shared_informer.go:240] Waiting for caches to sync for resource quota
I0627 12:35:10.838053       1 shared_informer.go:247] Caches are synced for namespace 
I0627 12:35:10.850616       1 shared_informer.go:247] Caches are synced for service account 
W0627 12:35:10.875553       1 actual_state_of_world.go:534] Failed to update statusUpdateNeeded field in actual state of world: Failed to set statusUpdateNeeded to needed true, because nodeName="minikube" does not exist
I0627 12:35:10.885223       1 shared_informer.go:247] Caches are synced for bootstrap_signer 
I0627 12:35:10.895176       1 shared_informer.go:247] Caches are synced for daemon sets 
I0627 12:35:10.895596       1 shared_informer.go:247] Caches are synced for TTL 
I0627 12:35:10.895718       1 shared_informer.go:247] Caches are synced for expand 
I0627 12:35:10.901699       1 shared_informer.go:247] Caches are synced for GC 
I0627 12:35:10.904228       1 shared_informer.go:247] Caches are synced for crt configmap 
I0627 12:35:10.918639       1 shared_informer.go:247] Caches are synced for endpoint_slice_mirroring 
I0627 12:35:10.925796       1 shared_informer.go:247] Caches are synced for ReplicaSet 
I0627 12:35:10.927937       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-serving 
I0627 12:35:10.929795       1 shared_informer.go:247] Caches are synced for HPA 
I0627 12:35:10.932287       1 shared_informer.go:247] Caches are synced for node 
I0627 12:35:10.932399       1 range_allocator.go:172] Starting range CIDR allocator
I0627 12:35:10.932409       1 shared_informer.go:240] Waiting for caches to sync for cidrallocator
I0627 12:35:10.932420       1 shared_informer.go:247] Caches are synced for cidrallocator 
I0627 12:35:10.935172       1 shared_informer.go:247] Caches are synced for taint 
I0627 12:35:10.935364       1 node_lifecycle_controller.go:1429] Initializing eviction metric for zone: 
W0627 12:35:10.935519       1 node_lifecycle_controller.go:1044] Missing timestamp for Node minikube. Assuming now as a timestamp.
I0627 12:35:10.935724       1 node_lifecycle_controller.go:1245] Controller detected that zone  is now in state Normal.
I0627 12:35:10.936106       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kubelet-client 
I0627 12:35:10.936985       1 event.go:291] "Event occurred" object="minikube" kind="Node" apiVersion="v1" type="Normal" reason="RegisteredNode" message="Node minikube event: Registered Node minikube in Controller"
I0627 12:35:10.937036       1 taint_manager.go:187] Starting NoExecuteTaintManager
I0627 12:35:10.939993       1 shared_informer.go:247] Caches are synced for deployment 
I0627 12:35:10.940240       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-kube-apiserver-client 
I0627 12:35:10.940360       1 shared_informer.go:247] Caches are synced for stateful set 
I0627 12:35:10.945274       1 shared_informer.go:247] Caches are synced for certificate-csrsigning-legacy-unknown 
I0627 12:35:10.946067       1 shared_informer.go:247] Caches are synced for disruption 
I0627 12:35:10.946666       1 disruption.go:339] Sending events to api server.
I0627 12:35:10.946369       1 shared_informer.go:247] Caches are synced for PVC protection 
I0627 12:35:10.946421       1 shared_informer.go:247] Caches are synced for endpoint 
I0627 12:35:10.957022       1 shared_informer.go:247] Caches are synced for ClusterRoleAggregator 
I0627 12:35:10.966762       1 shared_informer.go:247] Caches are synced for certificate-csrapproving 
I0627 12:35:10.971331       1 shared_informer.go:247] Caches are synced for endpoint_slice 
I0627 12:35:10.973098       1 shared_informer.go:247] Caches are synced for PV protection 
I0627 12:35:10.976738       1 shared_informer.go:247] Caches are synced for ReplicationController 
I0627 12:35:11.140539       1 shared_informer.go:247] Caches are synced for job 
I0627 12:35:11.152892       1 shared_informer.go:247] Caches are synced for persistent volume 
I0627 12:35:11.153763       1 shared_informer.go:247] Caches are synced for resource quota 
I0627 12:35:11.204175       1 shared_informer.go:247] Caches are synced for attach detach 
I0627 12:35:11.204812       1 shared_informer.go:247] Caches are synced for resource quota 
I0627 12:35:11.254315       1 range_allocator.go:373] Set node minikube PodCIDR to [10.244.0.0/24]
I0627 12:35:11.263932       1 event.go:291] "Event occurred" object="kube-system/kube-proxy" kind="DaemonSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: kube-proxy-ztwgj"
I0627 12:35:11.264794       1 event.go:291] "Event occurred" object="kube-system/coredns" kind="Deployment" apiVersion="apps/v1" type="Normal" reason="ScalingReplicaSet" message="Scaled up replica set coredns-74ff55c5b to 1"
I0627 12:35:11.541897       1 event.go:291] "Event occurred" object="kube-system/coredns-74ff55c5b" kind="ReplicaSet" apiVersion="apps/v1" type="Normal" reason="SuccessfulCreate" message="Created pod: coredns-74ff55c5b-bsdwv"
I0627 12:35:11.684495       1 shared_informer.go:240] Waiting for caches to sync for garbage collector
E0627 12:35:11.691210       1 clusterroleaggregation_controller.go:181] admin failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "admin": the object has been modified; please apply your changes to the latest version and try again
E0627 12:35:11.692779       1 clusterroleaggregation_controller.go:181] edit failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "edit": the object has been modified; please apply your changes to the latest version and try again
I0627 12:35:11.784907       1 shared_informer.go:247] Caches are synced for garbage collector 
I0627 12:35:11.829129       1 shared_informer.go:247] Caches are synced for garbage collector 
I0627 12:35:11.829192       1 garbagecollector.go:151] Garbage collector: all resource monitors have synced. Proceeding to collect garbage
E0627 12:35:11.831217       1 clusterroleaggregation_controller.go:181] edit failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "edit": the object has been modified; please apply your changes to the latest version and try again
E0627 12:35:11.848352       1 clusterroleaggregation_controller.go:181] admin failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "admin": the object has been modified; please apply your changes to the latest version and try again
E0627 12:35:11.987699       1 clusterroleaggregation_controller.go:181] admin failed with : Operation cannot be fulfilled on clusterroles.rbac.authorization.k8s.io "admin": the object has been modified; please apply your changes to the latest version and try again
==== END logs for container kube-controller-manager of pod kube-system/kube-controller-manager-minikube ====
==== START logs for container kube-proxy of pod kube-system/kube-proxy-ztwgj ====
I0627 12:35:14.697064       1 node.go:172] Successfully retrieved node IP: 192.168.99.101
I0627 12:35:14.697260       1 server_others.go:142] kube-proxy node IP is an IPv4 address (192.168.99.101), assume IPv4 operation
W0627 12:35:14.736798       1 server_others.go:584] Unknown proxy mode "", assuming iptables proxy
I0627 12:35:14.736987       1 server_others.go:185] Using iptables Proxier.
I0627 12:35:14.737579       1 server.go:650] Version: v1.20.7
I0627 12:35:14.738494       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_established' to 86400
I0627 12:35:14.738872       1 conntrack.go:100] Set sysctl 'net/netfilter/nf_conntrack_tcp_timeout_close_wait' to 3600
I0627 12:35:14.739281       1 config.go:224] Starting endpoint slice config controller
I0627 12:35:14.739297       1 shared_informer.go:240] Waiting for caches to sync for endpoint slice config
I0627 12:35:14.739337       1 config.go:315] Starting service config controller
I0627 12:35:14.739386       1 shared_informer.go:240] Waiting for caches to sync for service config
I0627 12:35:14.843230       1 shared_informer.go:247] Caches are synced for service config 
I0627 12:35:14.843368       1 shared_informer.go:247] Caches are synced for endpoint slice config 
==== END logs for container kube-proxy of pod kube-system/kube-proxy-ztwgj ====
==== START logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
I0627 12:34:32.246722       1 serving.go:331] Generated self-signed cert in-memory
W0627 12:34:44.536445       1 authentication.go:337] Error looking up in-cluster authentication configuration: Get "https://192.168.99.101:8443/api/v1/namespaces/kube-system/configmaps/extension-apiserver-authentication": net/http: TLS handshake timeout
W0627 12:34:44.537369       1 authentication.go:338] Continuing without authentication configuration. This may treat all requests as anonymous.
W0627 12:34:44.537685       1 authentication.go:339] To require authentication configuration lookup to succeed, set --authentication-tolerate-lookup-failure=false
I0627 12:34:50.945675       1 secure_serving.go:197] Serving securely on 127.0.0.1:10259
I0627 12:34:50.946175       1 tlsconfig.go:240] Starting DynamicServingCertificateController
I0627 12:34:50.946384       1 configmap_cafile_content.go:202] Starting client-ca::kube-system::extension-apiserver-authentication::client-ca-file
I0627 12:34:50.997951       1 shared_informer.go:240] Waiting for caches to sync for client-ca::kube-system::extension-apiserver-authentication::client-ca-file
E0627 12:34:51.009342       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0627 12:34:51.014690       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0627 12:34:51.015114       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0627 12:34:51.017627       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1beta1.PodDisruptionBudget: failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0627 12:34:51.019674       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0627 12:34:51.023757       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0627 12:34:51.028632       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0627 12:34:51.030961       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0627 12:34:51.031366       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
E0627 12:34:51.031923       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0627 12:34:51.032378       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0627 12:34:51.170493       1 reflector.go:138] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0627 12:34:51.925579       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Pod: failed to list *v1.Pod: pods is forbidden: User "system:kube-scheduler" cannot list resource "pods" in API group "" at the cluster scope
E0627 12:34:52.049331       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolumeClaim: failed to list *v1.PersistentVolumeClaim: persistentvolumeclaims is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumeclaims" in API group "" at the cluster scope
E0627 12:34:52.108384       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Node: failed to list *v1.Node: nodes is forbidden: User "system:kube-scheduler" cannot list resource "nodes" in API group "" at the cluster scope
E0627 12:34:52.134162       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicaSet: failed to list *v1.ReplicaSet: replicasets.apps is forbidden: User "system:kube-scheduler" cannot list resource "replicasets" in API group "apps" at the cluster scope
E0627 12:34:52.164908       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StatefulSet: failed to list *v1.StatefulSet: statefulsets.apps is forbidden: User "system:kube-scheduler" cannot list resource "statefulsets" in API group "apps" at the cluster scope
E0627 12:34:52.216266       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1beta1.PodDisruptionBudget: failed to list *v1beta1.PodDisruptionBudget: poddisruptionbudgets.policy is forbidden: User "system:kube-scheduler" cannot list resource "poddisruptionbudgets" in API group "policy" at the cluster scope
E0627 12:34:52.277087       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.StorageClass: failed to list *v1.StorageClass: storageclasses.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "storageclasses" in API group "storage.k8s.io" at the cluster scope
E0627 12:34:52.287952       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.Service: failed to list *v1.Service: services is forbidden: User "system:kube-scheduler" cannot list resource "services" in API group "" at the cluster scope
E0627 12:34:52.313720       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.PersistentVolume: failed to list *v1.PersistentVolume: persistentvolumes is forbidden: User "system:kube-scheduler" cannot list resource "persistentvolumes" in API group "" at the cluster scope
E0627 12:34:52.391583       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.ReplicationController: failed to list *v1.ReplicationController: replicationcontrollers is forbidden: User "system:kube-scheduler" cannot list resource "replicationcontrollers" in API group "" at the cluster scope
E0627 12:34:52.459209       1 reflector.go:138] k8s.io/apiserver/pkg/server/dynamiccertificates/configmap_cafile_content.go:206: Failed to watch *v1.ConfigMap: failed to list *v1.ConfigMap: configmaps "extension-apiserver-authentication" is forbidden: User "system:kube-scheduler" cannot list resource "configmaps" in API group "" in the namespace "kube-system"
E0627 12:34:52.531598       1 reflector.go:138] k8s.io/client-go/informers/factory.go:134: Failed to watch *v1.CSINode: failed to list *v1.CSINode: csinodes.storage.k8s.io is forbidden: User "system:kube-scheduler" cannot list resource "csinodes" in API group "storage.k8s.io" at the cluster scope
I0627 12:34:55.510066       1 shared_informer.go:247] Caches are synced for client-ca::kube-system::extension-apiserver-authentication::client-ca-file 
==== END logs for container kube-scheduler of pod kube-system/kube-scheduler-minikube ====
==== START logs for container storage-provisioner of pod kube-system/storage-provisioner ====
I0627 12:35:17.499700       1 storage_provisioner.go:116] Initializing the minikube storage provisioner...
I0627 12:35:17.539827       1 storage_provisioner.go:141] Storage provisioner initialized, now starting service!
I0627 12:35:17.540196       1 leaderelection.go:243] attempting to acquire leader lease kube-system/k8s.io-minikube-hostpath...
I0627 12:35:17.558470       1 leaderelection.go:253] successfully acquired lease kube-system/k8s.io-minikube-hostpath
I0627 12:35:17.559748       1 event.go:282] Event(v1.ObjectReference{Kind:"Endpoints", Namespace:"kube-system", Name:"k8s.io-minikube-hostpath", UID:"8909cd0d-ee27-4a9d-aac0-ae7426357a93", APIVersion:"v1", ResourceVersion:"455", FieldPath:""}): type: 'Normal' reason: 'LeaderElection' minikube_4ad66829-b018-456a-b3b3-ca0adbee742d became leader
I0627 12:35:17.560129       1 controller.go:835] Starting provisioner controller k8s.io/minikube-hostpath_minikube_4ad66829-b018-456a-b3b3-ca0adbee742d!
I0627 12:35:17.662468       1 controller.go:884] Started provisioner controller k8s.io/minikube-hostpath_minikube_4ad66829-b018-456a-b3b3-ca0adbee742d!
==== END logs for container storage-provisioner of pod kube-system/storage-provisioner ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": [
        {
            "metadata": {
                "name": "minikube.168c707f24237749",
                "namespace": "default",
                "uid": "8fd380b1-2098-4e6f-a515-eed77d4ca229",
                "resourceVersion": "268",
                "creationTimestamp": "2021-06-27T12:34:53Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:16Z",
            "lastTimestamp": "2021-06-27T12:34:17Z",
            "count": 7,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c707f24239ae5",
                "namespace": "default",
                "uid": "c74c9ddb-c4f6-4da4-81a6-e19f9d0ef964",
                "resourceVersion": "253",
                "creationTimestamp": "2021-06-27T12:34:54Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:16Z",
            "lastTimestamp": "2021-06-27T12:34:17Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c707f2423cd63",
                "namespace": "default",
                "uid": "13e43a5c-efb5-4d23-bc84-782f498abc39",
                "resourceVersion": "262",
                "creationTimestamp": "2021-06-27T12:34:54Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:16Z",
            "lastTimestamp": "2021-06-27T12:34:17Z",
            "count": 6,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c7088ce8fdba4",
                "namespace": "default",
                "uid": "dd264f82-331c-4cff-88bd-24eb226ce4f6",
                "resourceVersion": "309",
                "creationTimestamp": "2021-06-27T12:34:58Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kubelet.",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:58Z",
            "lastTimestamp": "2021-06-27T12:34:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c7088eeacafa3",
                "namespace": "default",
                "uid": "07a04ff7-f072-40e3-8c4d-432420108559",
                "resourceVersion": "319",
                "creationTimestamp": "2021-06-27T12:34:59Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node minikube status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:58Z",
            "lastTimestamp": "2021-06-27T12:34:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c7088eead6252",
                "namespace": "default",
                "uid": "07ec6a84-9715-4afe-a65f-2adf84e5e50f",
                "resourceVersion": "321",
                "creationTimestamp": "2021-06-27T12:34:59Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node minikube status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:58Z",
            "lastTimestamp": "2021-06-27T12:34:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c7088eeafb1a0",
                "namespace": "default",
                "uid": "9f9453b3-f5cb-4bb0-8143-0cbbb9f67b25",
                "resourceVersion": "320",
                "creationTimestamp": "2021-06-27T12:34:59Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node minikube status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:58Z",
            "lastTimestamp": "2021-06-27T12:34:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c7089213deae1",
                "namespace": "default",
                "uid": "181eb346-50f4-48cb-b5f8-eb06a76c46f6",
                "resourceVersion": "326",
                "creationTimestamp": "2021-06-27T12:34:59Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeAllocatableEnforced",
            "message": "Updated Node Allocatable limit across pods",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:34:59Z",
            "lastTimestamp": "2021-06-27T12:34:59Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c708b618faf8a",
                "namespace": "default",
                "uid": "ff7b0099-7bf9-47c9-a101-d3cc7db1b6d9",
                "resourceVersion": "358",
                "creationTimestamp": "2021-06-27T12:35:09Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "NodeReady",
            "message": "Node minikube status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:09Z",
            "lastTimestamp": "2021-06-27T12:35:09Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c708bb64fab01",
                "namespace": "default",
                "uid": "7420cbe5-49a7-4047-a58c-2472eabbbe32",
                "resourceVersion": "393",
                "creationTimestamp": "2021-06-27T12:35:11Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "d0c0ff55-5314-4afb-8077-055e6cf02a04",
                "apiVersion": "v1"
            },
            "reason": "RegisteredNode",
            "message": "Node minikube event: Registered Node minikube in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2021-06-27T12:35:10Z",
            "lastTimestamp": "2021-06-27T12:35:10Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "minikube.168c708c990ad085",
                "namespace": "default",
                "uid": "39127664-12a5-4f08-aee0-a6260220cfd7",
                "resourceVersion": "445",
                "creationTimestamp": "2021-06-27T12:35:14Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "minikube",
                "uid": "minikube"
            },
            "reason": "Starting",
            "message": "Starting kube-proxy.",
            "source": {
                "component": "kube-proxy",
                "host": "minikube"
            },
            "firstTimestamp": "2021-06-27T12:35:14Z",
            "lastTimestamp": "2021-06-27T12:35:14Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "uid": "b5646bc8-8f5f-449d-b0dd-f494c4a74e99",
                "resourceVersion": "204",
                "creationTimestamp": "2021-06-27T12:34:53Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "clusterIP": "10.96.0.1",
                "clusterIPs": [
                    "10.96.0.1"
                ],
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": []
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": []
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "resourceVersion": "708"
    },
    "items": []
}
